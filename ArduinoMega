#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define OLED_RESET     -1    
#define SCREEN_ADDRESS 0x3D

const int highSensor = 7;
const int lowSensor = 6;
const int light = 5;
const int siren = 4;

bool diplayneed = false;

String displayLines[6];
int coolantLevel=0;
int sensor1 =0;
int sensor2 =0;


static const unsigned char logo_bmp[] PROGMEM ={
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xf8, 0x06, 0x0f, 0xff, 0xc0, 0xff, 0xff, 0x01, 0xff, 0xfc, 0x03, 0x87,
  0xff, 0xe0, 0x7f, 0xfe, 0x0f, 0x1f, 0xff, 0x0c, 0x3f, 0xff, 0x87, 0xff, 0xff, 0x07, 0x8f, 0xff,
  0x86, 0x1f, 0xfe, 0x0f, 0x3f, 0xfe, 0x1e, 0x3f, 0xff, 0x87, 0xff, 0xff, 0x87, 0x9f, 0xff, 0x87,
  0x0f, 0xff, 0x0e, 0x3f, 0xfe, 0x1e, 0x1f, 0xff, 0x87, 0xff, 0xff, 0x87, 0x3f, 0xff, 0x0f, 0x0f,
  0xff, 0x06, 0x7f, 0xfe, 0x1e, 0x1f, 0xff, 0x87, 0xff, 0xff, 0xc3, 0x3f, 0xff, 0x0f, 0x0f, 0xff,
  0x84, 0xff, 0xfe, 0x1e, 0x1f, 0xff, 0x87, 0x9f, 0xff, 0xc2, 0x3f, 0xff, 0x87, 0x0f, 0xff, 0xc0,
  0xff, 0xff, 0x1c, 0x3f, 0xff, 0x87, 0x1f, 0xff, 0xe0, 0x7f, 0xff, 0x86, 0x1f, 0xff, 0xc1, 0xff,
  0xff, 0x80, 0x7f, 0xff, 0x00, 0x1f, 0xff, 0xe0, 0x7f, 0xff, 0xc2, 0x3f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9,
  0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff,
  0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xe0, 0x7f, 0x80, 0xf9, 0xf0, 0x3f,
  0xc0, 0x7c, 0x7f, 0xf0, 0x3f, 0xe1, 0xe3, 0xff, 0xfe, 0x00, 0x1e, 0x00, 0x39, 0xc0, 0x0f, 0x00,
  0x18, 0x01, 0xc0, 0x03, 0x00, 0x37, 0xff, 0xfe, 0x1f, 0x8c, 0x7f, 0x19, 0x8f, 0xc6, 0x3f, 0x98,
  0x03, 0x8f, 0xc3, 0x1e, 0x37, 0xff, 0xfe, 0x3f, 0xcc, 0xff, 0x99, 0x9f, 0xe6, 0x7f, 0xfe, 0x7f,
  0x9f, 0xe3, 0x3f, 0x37, 0xff, 0xfe, 0x7f, 0xcc, 0xff, 0x99, 0x9f, 0xe6, 0x7f, 0xfe, 0x7f, 0x9f,
  0xf3, 0x3f, 0x37, 0xff, 0xfe, 0x7f, 0xcc, 0xff, 0x99, 0x00, 0x07, 0x00, 0x3e, 0x7f, 0x9f, 0xf3,
  0x3f, 0xb7, 0xff, 0xfe, 0x7f, 0xcc, 0xff, 0x99, 0x1f, 0xf7, 0x80, 0x1e, 0x7f, 0x9f, 0xf3, 0x3f,
  0xf7, 0xff, 0xfe, 0x7f, 0xcc, 0xff, 0x99, 0x1f, 0xff, 0xff, 0xce, 0x7f, 0x9f, 0xf3, 0x3f, 0xff,
  0xff, 0xfe, 0x3f, 0xcc, 0xff, 0x99, 0x9f, 0xf7, 0xff, 0xce, 0x7f, 0x9f, 0xf3, 0x3f, 0xff, 0xff,
  0xfe, 0x1f, 0x8c, 0x7f, 0x19, 0x8f, 0xe6, 0x3f, 0x8e, 0x79, 0x8f, 0xe3, 0x3f, 0xff, 0xff, 0xfe,
  0x00, 0x1e, 0x00, 0x39, 0xc0, 0x07, 0x00, 0x1e, 0x01, 0xc0, 0x03, 0x3f, 0xff, 0xff, 0xfe, 0x60,
  0xff, 0xc1, 0xff, 0xf0, 0x3f, 0xc0, 0x7f, 0x87, 0xf0, 0x13, 0x7f, 0xff, 0xff, 0xfe, 0x7f, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff
};

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

void setup() {
  pinMode(highSensor, INPUT);
  pinMode(lowSensor, INPUT);
  pinMode(light,OUTPUT);
  pinMode(siren,OUTPUT);
 
  Serial.begin(9600);

  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }
  //Serial.println("Display logo");
  testdrawbitmap();
  delay(4000);
  //Serial.println("Display boot");
  displayLines[0] = "  Volvo V50 T5 AWD";
  displayLines[1] = "       Polestar";
  displayLines[2] = "";
  displayLines[3] = " Power Setup - 280ps";
  displayLines[4] = "Torque Setup - 400nm";
  displayLines[5] = "    AWD bias - 60/40";
  goShow();
  delay(4000);
  displayLines[4] = "";

}

void loop() { 
  getlevel();
  switch (coolantLevel) {
    case 2:
      displayLines[3] = " Coolant Level - ok";
      displayLines[5] = "       All GOOD";
      digitalWrite(light,LOW);
      diplayneed = true;
      break;
    case 1:
      displayLines[3] = " Coolant Level - LOW";
      displayLines[5] = "        REFILL";
      digitalWrite(light,HIGH);
      delay(50);
      digitalWrite(light,LOW);
      diplayneed = true;
      break;
    case 0:
      displayLines[3] = " Coolant Level - OUT";
      displayLines[5] = "    STOP THE CAR!";
      digitalWrite(light,HIGH);
      //Serial.println("SING STOP");
      tone(siren, 270, 1000);
      diplayneed = true;
      break;
    case 3:
      displayLines[3] = " Inconsistent read";
      displayLines[5] = "Manual Check coolant";
      digitalWrite(light,1);
      diplayneed = true;
      //Serial.println("SING CHECK");
      tone(siren, 60, 1000);
      break;
  }
  if (diplayneed) goShow();
  delay(1000); 
}


// aux functions
void testdrawbitmap(void) {
  display.clearDisplay();
  display.drawBitmap(4,2,logo_bmp, 120, 60, 1);
  display.display();
  delay(1000);
}


void goShow(){
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 10);
  for (uint8_t b=0; b<6; b++) {
    display.println(displayLines[b]);
  }
  display.display();
}

void getlevel(){
  Serial.println("Reading levels");
  coolantLevel = 0;
  sensor1 =0;
  sensor2 =0;
  sensor1 = digitalRead(lowSensor);
  if (sensor1==LOW) {
    Serial.println("Sensor Low is - HIGH");
    coolantLevel++;
    }
  sensor2 = digitalRead(highSensor);
 if (sensor2 == LOW){
    Serial.println("Sensor high is - HIGH");
    coolantLevel++;
  }
  if (sensor1 == 1 && sensor2 == 0) coolantLevel = 3; 
}
